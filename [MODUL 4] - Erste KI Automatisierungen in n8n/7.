Im letzten Abschnitt haben wir uns angesehen, wie eine Node aufgebaut ist.
Wir haben gelernt, dass jede Node einen Input, einen Konfigurationsbereich und einen Output hat und dass wir die Ergebnisse einer Node in verschiedenen Darstellungsformen anzeigen können.

Eine dieser Darstellungsformen ist besonders wichtig, weil sie uns zeigt, wie die Daten tatsächlich zwischen den Nodes fließen, mämlich im im sogenannte JSON-Format.

JSON steht für JavaScript Object Notation und ist das Format, in dem n8n alle Informationen überträgt.
Immer wenn eine Node etwas ausführt – also zum Beispiel eine E-Mail liest, eine Datei speichert oder KI-Text erzeugt – werden die Ergebnisse in JSON weitergegeben.
So „sprechen“ alle Nodes dieselbe Sprache, egal ob sie E-Mails, Tabellen oder KI-Modelle ansteuern.

Wenn du dir JSON in n8n ansiehst, erkennst du sofort den typischen Aufbau mit geschweiften Klammern, Anführungszeichen und Doppelpunkten.
Das sieht auf den ersten Blick vielleicht technisch aus, aber im Grunde ist es ganz einfach.

JSON besteht aus sogenannten Key-Value-Pairs. Ein Key beschreibt, um welche Information es sich handelt, und der Value enthält den Inhalt dieser Information.

Hier ein einfaches Beispiel:
Der Key lautet „name“ und dieser verweist auf den Wert „Anna“.
So ein Objekt kann natürlich mehrere Felder enthalten –
zum Beispiel einen weiteren Key namens „email“, der auf den Wert „anna@beispiel.de" zeigt.

Aber wofür braucht man das überhaupt?
In einer Automatisierung arbeiten wir ständig mit Daten.
Wenn wir zum Beispiel eine E-Mail verschicken wollen, brauchen wir eine Empfängeradresse, einen Betreff und einen Text.

Diese Werte können sich jedes Mal ändern.
Vielleicht schicken wir die E-Mail heute an Anna und morgen an Max.
Damit die Automatisierung weiß, welcher Wert wann eingesetzt werden soll, müssen wir auf diese Daten verweisen können.

Und genau das tun wir mit den Keys.
Der Key ist sozusagen der Name des Feldes,ber den die Automatisierung automatisch den passenden Wert findet – in unserem Fall also die jeweilige E-Mail-Adresse.

Aber JSON kann noch mehr,
denn Daten sind oft verschachtelt – also in mehreren Ebenen organisiert.
Ein gutes Beispiel hierfür ist eine E-Mail.

Sie besteht aus einem Betreff einem Text und unter umständen auch Anhängen.
Weil es unterschiedlich viele Anhänge geben kann, verweist der Key "anhänge" auf eine Liste.

Eine Liste, auch "Array" genannt erkennst du übrigens immer an diesen Eckigen klammern.
In unserer Liste sehen wir zwei Anhänge, "lebenslauf.pdf" und "zeugnis.pdf".

In einer klassischen Liste gibt es keine "Keys", also keine Schlüssen um sich auf die Werte innerhalb der Liste zu referenzieren.
Hier arbeitet man mit einem Index, also einer simplen Nummerierung: 1 , 2 , 3 udn so weiter.

So eine Liste kann aber auch Objekte enthalten. Das ist immer dann notwenig wenn wir Werte in einer Liste Gruppieren müssen.
Anhänge haben in der Regel mehreren Informationen. Neben der Bezeichnung vielleict auch noch eine Dateigröße oder der gleichen.

Wichtig zu verstehen, in einem JSON gibt es immer Objekte und Listen. Ein Objekt ist immer durch geschweifte Klammern gekennzeichnet und besteht aus Key-Value-Paaren
und Listen sind immer durch Eckige Klammern gekennzeichnet und können enzelne Werte oder Objekte beinhalten.

Ein Key kann auch direkt auf ein objekt verweisen. In diesem Beispiel haben wir eine Firma 


Damit du dich nicht erschreckst, wenn du JSON siehst:
Jede Node in n8n arbeitet im Hintergrund genau mit solchen Strukturen.
Manche Nodes zeigen dir diese Daten grafisch an,
andere direkt im JSON-Format –
je nachdem, was du lieber nutzen möchtest.

So kannst du genau nachvollziehen,
welche Informationen in deinem Workflow von einer Node zur nächsten fließen.
